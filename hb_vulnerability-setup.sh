#! /bin/bash
# A script to prepare a ubuntu 12.04.5 device to be vulnerable
# to the heartbleed bug. 

# Created by Jamie Coupe as a python3 version of a Heartbleed IDS tool created
# as part of his honours project.

# Set constants
HOME_FOLDER="$(pwd)"
DEPENDENCIES_FOLDER="dependencies"
PCRE_FOLDER="$DEPENDENCIES_FOLDER/pcre"
OPENSSL_FOLDER="$DEPENDENCIES_FOLDER/openssl"
HTTPD_FOLDER="$DEPENDENCIES_FOLDER/httpd"

# Echo Colours
GREEN='\033[0;32m'
RED='\033[0;31m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m' # No colour

# Function to print success or failure message
function try_command(){
	local command=$1
		
	if $Command; then
	        echo -e "${GREEN}Successful"
	else
        	echo -e "${RED}Unsuccessfull ${NC} "
	fi
}

# Function to install a package
function install_package() {
	local folder=$1
	local package=$2

        echo -ne "${BLUE}$package:"

        if dpkg -i "$1/$2" > /dev/null 2>&1; then
       	        echo -e "${GREEN}Installed Successfully"
        else
               	echo -e "${RED}Failed to install${NC} "
       	fi
}

echo -e  "${YELLOW}Starting Heartbleed Setup"

echo -e "${YELLOW}Script must be run as root"
echo -ne "${BLUE}SUDO Check		: "
if [ "$EUID" -ne 0 ]; then
	echo -e "${RED}Failed"
        echo -e "Quitting ${NC} "
	exit 1
else
	echo -e "${GREEN}Successful"
fi

# Check version of machines
echo -e "${YELLOW}Need to be on version 12.0.4"
echo -ne  "${BLUE}Carrying out version check: "

release=$(lsb_release -d)
if [[ $release = *"12.04.5"*  ]]
then
	echo -e "${GREEN}Right Version (12.04.5)"
else
	echo -e "${RED}Wrong version"
	echo -e "Quitting${NC}"
	exit 2
fi

# Install gnu c++ compiler
echo -e "${YELLOW}Installing GNU C++ Compiler" 
echo -ne "${BLUE}Updating apt-get        : " 
try_command "$(apt-get update)"

echo -ne "${BLUE}Install Dev tools	: "
try_command "$(apt-get --assume-yes install build-essential manpages-dev)"


# Install libprce3 and dependancies (3, cpp0, dev in order)
# .deb files are held in the $PCRE_FOLDER
echo -e "${YELLOW}Installing libprce3 and dependancies"

install_package "$PCRE_FOLDER" "libpcre3_8.12-4_amd64.deb"
install_package "$PCRE_FOLDER" "libpcrecpp0_8.12-4_amd64.deb"
install_package "$PCRE_FOLDER" "libpcre3-dev_8.12-4_amd64.deb"

# Install pcre 8.40 from local package
echo -e "${YELLOW}Installing pcre-8.4"
echo -ne "${BLUE}Copying pcre-8.40	: "
try_command "$(cp $PCRE_FOLDER/pcre-8.40.tar.gz ~)"

echo -ne "${BLUE}Extracting pcre-8.40	: "
cd ~
try_command "$(tar -zxvf pcre-8.40.tar.gz)"

echo -ne "${BLUE}Configuring pcre-8.40	: "
cd pcre-8.40
try_command "$(./configure --prefix=/usr/local/pcre-config)"

echo -ne "${BLUE}Making pcre-8.40 	: "
try_command "$(make)"

echo -ne "${BLUE}Installing pcre-8.40	: "
try_command "$(make install 2>/dev/null )"


# Install openssl-1.0.1e
# tar zip is in the $OPENSSL_FOLDER
echo -e "${YELLOW}Installing openssl 1.0.1e"
echo -ne "${BLUE}Copying openssl 	: "
cd "${HOME_FOLDER}"
try_command "$(cp $OPENSSL_FOLDER/openssl-1.0.1e.tar.gz ~)"

cd ~
echo -ne "${BLUE}Extracting openssl      : "
try_command "$(tar -zxvf openssl-1.0.1e.tar.gz)"

echo -ne "${BLUE}Configuring openssl  	: "
cd openssl-1.0.1e
try_command "$(./config     --prefix=/opt/openssl-1.0.1e     --openssldir=/opt/openssl-1.0.1e -fPIC -DOPENSSL_PIC)"

echo -ne "${BLUE}Making openssl       	: "
try_command "$(make > /dev/null 2>&1)"

echo -ne "${BLUE}Installing openssl   	: "
try_command "$(make install_sw)"


## Install HTTPD
# tar zips are in $dependencies/$httpd folder
echo -e "${YELLOW}Installing Httpd 2.4.25"
echo -ne "${BLUE}Copying httpd       	: "
cd "${HOME_FOLDER}"
try_command "$(cp $HTTPD_FOLDER/httpd-2.4.25.tar.gz ~)"

cd ~
echo -ne "${BLUE}Extracting httpd 	: "
try_command "$(tar -zxvf httpd-2.4.25.tar.gz)"

# Moving to scrlib
cd httpd-2.4.25/srclib/

#Installing apr
echo -e "${YELLOW}Installing apr 1.5.2"
echo -ne "${BLUE}Extracting apr		: "
try_command "$(tar zxvf $HOME_FOLDER/$HTTPD_FOLDER/apr-1.5.2.tar.gz)"

echo -ne "${BLUE}Linking apr		: "
try_command "$(ln -s apr-1.5.2/ apr > /dev/null 2>&1)"


#Installing apr-util
echo -e "${YELLOW}Installing apr-uti 1.5.4"
echo -ne "${BLUE}Extracting apr-util	: "
try_command "$(tar zxvf $HOME_FOLDER/$HTTPD_FOLDER/apr-util-1.5.4.tar.gz)"

echo -ne "${BLUE}Linking apr-util	: "
try_command "$(ln -s apr-util-1.5.4/ apr-util 2>/dev/null)"

# Config, make and install httpd
echo -ne "${BLUE}Configuring httpd 	: "
cd ../
try_command "$(./configure     --prefix=/opt/httpd     --with-included-apr     --enable-ssl     --with-ssl=/opt/openssl-1.0.1e --enable-ssl-staticlib-deps --enable-mods-static=ssl --with-pcre=/usr/local/pcre-config > /dev/null 2>&1)"
 
echo -ne "${BLUE}Making httpd	       	: "
try_command "$(make > /dev/null 2>&1)"

echo -ne "${BLUE}Installing httpd      	: "
try_command "$(make install > /dev/null 2>&1)"


##  Configure HTTPS to use port 443 
cd ~ 

echo -e "${YELLOW}Configure HTTPD"
echo -ne "${BLUE}Adding SSL settings	: "
try_command "$(sed -i '/^#.*Include conf\/extra\/httpd-ssl.conf/s/^#//' /opt/httpd/conf/httpd.conf)"

echo -ne "${BLUE}Setting cache settings	: "
try_command "$(sed -i '/^#.*LoadModule socache_shmcb_module modules\/mod_socache_shmcb.so/s/^#//' /opt/httpd/conf/httpd.conf)"

## Configure openssl 
echo -e "${YELLOW}Configure openssl"
echo -ne "${BLUE}Setting up openssl	: "
ip="$(ifconfig | grep -A 1 'eth0' | tail -1 | cut -d ':' -f 2 | cut -d ' ' -f 1)"
try_command "$(openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /opt/httpd/conf/server.key -out /opt/httpd/conf/server.crt -subj '/C=UK/ST=Scotland/L=Glasgow/O=Project/OU=SSLUnit/CN=${ip}' > /dev/null 2>&1)"

## Start httpd
echo -e "${YELLOW}Start HTTPD"
echo -ne "${BLUE}Starting Httpd		: "
try_command "$(/opt/httpd/bin/apachectl start > /dev/null 2>&1)"

## Disable the fire wall (need to check if this is actually required) 
echo -e "${YELLOW}Disable Firewall"
echo -ne "${BLUE}Disabling Firewall	: "
try_command "$(iptables -F)"

## Clean up
echo -e "${YELLOW}Cleaning up install files"
cd ~

echo -ne "${BLUE}Removing pcre		: "
try_command "$(rm -rf ~/pcre-8.40)"
echo -ne "${BLUE}Removing pcre tar       : "
try_command "$(rm -rf ~/pcre-8.40.tar.gz)"

echo -ne "${BLUE}Removing openssl	: "
try_command "$(rm -rf ~/openssl-1.0.1e)"
echo -ne "${BLUE}Removing openssl tar    : "
try_command "$(rm -rf ~/openssl-1.0.1e.tar.gz)"

echo -ne "${BLUE}Removing Httpd		: "
try_command "$(rm -rf ~/httpd-2.4.25)"
echo -ne "${BLUE}Removing Httpd tar      : "
try_command "$(rm -rf ~/httpd-2.4.25.tar.gz)"

# Exit Statement
echo -e "${YELLOW}Overall status		: ${GREEN}Complete${NC} "
exit 0
